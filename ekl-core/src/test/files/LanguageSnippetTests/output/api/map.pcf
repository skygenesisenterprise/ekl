facts {
  ["isEmpty"] {
    true
    true
  }
  ["containsKey()"] {
    true
    true
    true
  }
  ["containsValue()"] {
    true
    true
    true
  }
  ["every()"] {
    true
    true
    true
  }
  ["any()"] {
    true
    true
    true
  }
}
examples {
  ["length"] {
    0
    3
  }
  ["getOrNull()"] {
    1
    null
  }
  ["keys"] {
    Set()
    Set("one", "two", "three")
    Set("one", "two", "three", "four")
  }
  ["values"] {
    List()
    List(1, 2, 3)
    List(1, 2, 3, 4)
  }
  ["remove()"] {
    Map()
    Map("one", 1, "three", 3)
    Map("one", 1, "two", 2, "three", 3)
  }
  ["filter()"] {
    Map()
    Map("one", 1, "two", 2)
    Map("two", 2)
  }
  ["mapKeys()"] {
    Map()
    Map("ONE1", 1, "TWO2", 2, "THREE3", 3)
    Map("one", 1, "two", 2, "three", 3)
  }
  ["mapValues()"] {
    Map()
    Map("one", 6, "two", 9, "three", 14)
    Map("one", 1, "two", 2, "three", 3)
  }
  ["map()"] {
    Map()
    Map("one", 3, "two", 6, "three", 9)
    Map(1, "one", 2, "two", 3, "three")
    "Expected value of type `Pair`, but got type `Int`. Value: 42"
  }
  ["flatMap()"] {
    Map()
    Map(1, 3, 2, 6, 3, 9)
    Map("one", "eno", "two", "owt", "three", "eerht")
    "Expected value of type `Map`, but got type `Int`. Value: 42"
  }
  ["entries"] {
    List()
    List(Pair("one", 1), Pair("two", 2), Pair("three", 3))
    List(Pair("one", 1), Pair("two", 2), Pair("three", 3), Pair("four", 4))
  }
  ["toMap()"] {
    Map()
    Map("one", 1, "two", 2, "three", 3)
  }
  ["toDynamic()"] {
    new {}
    new {
      one = 1
      two = 2
      three = 3
    }
  }
  ["toMapping()"] {
    new {}
    new {
      ["one"] = 1
      ["two"] = 2
      ["three"] = 3
    }
  }
  ["put()"] {
    Map("one", 1)
    Map("one", 1, "two", 2, "three", 3)
    Map("one", 1, "two", 2, "three", 3, "four", 4)
    Map("one", 4, "two", 2, "three", 3)
  }
  ["toTyped()"] {
    new {
      name = "Pigeon"
      age = 42
    }
    new {
      name = "Pigeon"
      age = 42
    }
    "Default"
    true
    true
    new {
      name = "Pigeon"
      age = 42
    }
    "Tried to read property `age` but its value is undefined."
    "Class `Int` is not a subtype of `Typed`."
    "Cannot instantiate abstract class `map#Abstract`."
  }
}
